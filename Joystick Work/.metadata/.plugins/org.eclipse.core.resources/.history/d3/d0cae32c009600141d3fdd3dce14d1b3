#include "WPILib.h"
#include "Buttons/JoystickButton.h"


class Robot: public IterativeRobot
{
public:
	Robot();
	~Robot();


	RobotDrive* myRobot;
	Joystick* lStick;
	Joystick* rStick;
	Talon* talon1;
	Talon* talon2;

	SmartDashboard* dash;

	//gyro and accelerometer
	Gyro* gyro;
	Accelerometer* accel;

	//button
	JoystickButton* button2;
	JoystickButton* button3;

	Encoder* enco;

	double convertToMs2(double gForce);
	void EncoSetup(Encoder* e);

private:
	LiveWindow *lw;


	void RobotInit();
	void AutonomousInit();
	void AutonomousPeriodic();
	void TeleopInit();
	void TeleopPeriodic();
	void TestPeriodic();


};

Robot::Robot()
{
	lw = LiveWindow::GetInstance();

	talon1 = new Talon(0);
	talon2 = new Talon(2);

	lStick = new Joystick(0);
	rStick = new Joystick(1);

	gyro = new Gyro(0);

	accel = new BuiltInAccelerometer();

	myRobot = new RobotDrive(talon1, talon2);

	button2 = new JoystickButton(lStick, 2);
	button3 = new JoystickButton(lStick, 3);

	enco = new Encoder(0, 1);

	myRobot->SetExpiration(0.1);

};

Robot::~Robot()
{
	delete talon1;
	delete talon2;

	delete lStick;
	delete rStick;

	delete gyro;
	delete accel;

	delete button2;
}




void Robot::RobotInit()
{
	gyro->InitGyro();


}

void Robot::AutonomousInit()
{

}

void Robot::AutonomousPeriodic()
{

}

void Robot::TeleopInit()
{

}

void Robot::TeleopPeriodic()
{

	//arcade drive
	myRobot->ArcadeDrive(lStick);

	//gyro->InitGyro();


	float theta = gyro->GetAngle();
	double rate = gyro->GetRate();

	double n_theta = static_cast<double>(theta);

	//accel values

	double xAcc = accel->GetX();
	double yAcc = accel->GetY();
	double zAcc = accel->GetZ();


	dash->init();

	std::string s = "Name";
	std::string t = "Wucas 2.0";

	dash->PutString(s, t);
	dash->PutNumber("Gyro theta", n_theta);
	dash->PutNumber("Gyro rate", rate);


	/*dash->PutNumber("X-Acc (Gs)", xAcc);
	dash->PutNumber("Y-Acc (Gs)", yAcc);
	dash->PutNumber("Z-Acc (Gs)", zAcc);*/

	dash->PutNumber("X-Acc (ms^-2)", convertToMs2(xAcc));
	dash->PutNumber("Y-Acc (ms^-2)", convertToMs2(yAcc));
	dash->PutNumber("Z-Acc (ms^-2)", convertToMs2(zAcc));

	bool isReset = button2->Get();

	dash->PutBoolean("Gyro Reset?", isReset);

	if(isReset)
	{
		gyro->Reset();
	}

	bool AchintyaIsBlack = button2->Get();

	dash->PutBoolean("Is Achintya black?", AchintyaIsBlack);


	//tank drive
	//myRobot->TankDrive(lStick, rStick);
}

void Robot::TestPeriodic()
{
	lw->Run();
}


double Robot::convertToMs2(double gForce)
{
	return gForce * 9.80665;
}

void Robot::EncoSetup(Encoder* e)
{
	e->SetMaxPeriod(0.1);
	e->SetMinRate(10);
	e->SetDistancePerPulse(5);
	e->SetReverseDirection(true);
	e->SetSamplesToAverage(7);
}

START_ROBOT_CLASS(Robot);
