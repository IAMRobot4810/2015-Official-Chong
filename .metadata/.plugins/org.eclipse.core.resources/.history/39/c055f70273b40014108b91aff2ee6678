#include "Lifter.h"

Lifter::Lifter()
{
	lifthelper = new CANTalon(5);
	clamper = new CANTalon(4);
	heightpot = new AnalogPotentiometer(3, 1.0, 0.0);
	topLimit = new DigitalInput(0);
	botLimit = new DigitalInput(1);
	currarmpos = Open;
	lifttalon = new CANTalon(6);
	armwidth = new AnalogInput(4);
	sDLift->init();
	currlevel = 0;

	Rolex = new Timer();


}

Lifter::~Lifter()
{
	delete lifthelper;
	delete clamper;
	delete heightpot;
	delete topLimit;
	delete botLimit;
	delete lifttalon;
	delete armwidth;

	delete Rolex;

}

float Lifter::talSpeedLift(){

	Rolex->Reset();
	Rolex->Start();
	sec = Rolex->Get();
	potRead = ConvertToInches(heightpot->Get());

	Rolex->Stop();

	liftRead = abs(potRead/sec);

	//Edit the 5.0

	if(liftRead > 5.0){

		while(liftRead > 5.0){

			setSpeedLift = setSpeedLift - 0.01;

		}

	}

	else if(liftRead <= 5.0){

		while(liftRead <= 5.0){

			setSpeedLift = setSpeedLift + 0.01;

		}

	}

	sDLift->PutNumber("LifterSpeed", setSpeedLift);

	return setSpeedLift;

}

int Lifter::GetLevel()
{
	return currlevel;
}

int Lifter::GetArmpos()
{
	return currarmpos;
}

void Lifter::SetLevel(level l)
{
	switch (l)
	{
	SetArmpos(Lifter::armpos::OPEN);
	case GROUND:
		if(ConvertToInches(heightpot->Get())>groundmeters && botLimit->Get())
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<=groundmeters || !botLimit->Get()){
			lifttalon->Set(0);
			currlevel = Ground;
		}
		break;
	case UNDERBOXONE:
		if(ConvertToInches(heightpot->Get())>uboxonemeters)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<uboxonemeters)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Underboxone;
		}
		break;
	case INBETWEEN:
		if(ConvertToInches(heightpot->Get())>inbetweenmeters)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<inbetweenmeters)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Inbetween;
		}
		break;
	case OVERBOXTWO:
		if(ConvertToInches(heightpot->Get())>overbtwometers)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<overbtwometers)
		{
		lifttalon->Set(-talSpeedLift());
		lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Overboxtwo;
		}
		break;
	case GETGARBAGECAN:
		if(ConvertToInches(heightpot->Get())>getgarbagemeters)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<getgarbagemeters)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Getgarbage;
		}
		break;
	case PLACEGARBAGECAN:
		if(ConvertToInches(heightpot->Get())>placegarbagemeters)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<placegarbagemeters)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = PlaceGarbage;
		}
		break;

	case TOP:

		if(ConvertToInches(heightpot->Get())<topmeters && topLimit->Get())
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())>=topmeters && !topLimit->Get())
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Top;
		}
		break;

	};

}

void Lifter::SetArmpos(armpos a)
{
	switch(a)
	{
	case OPEN:
		if(ConvertToInches(armwidth->GetVoltage())>openwidthm)
				{
					clamper->Set(-0.50);
				}
				else if(ConvertToInches(armwidth->GetVoltage())<openwidthm)
				{
					lifttalon->Set(0.50);
				}
				else
				{
					lifttalon->Set(0);
					currarmpos = Open;
				}
		break;
	case BOXWIDE:
		if(ConvertToInches(armwidth->GetVoltage())>boxwidem)
						{
							clamper->Set(-0.50);
						}
						else if(ConvertToInches(armwidth->GetVoltage())<boxwidem)
						{
							lifttalon->Set(0.50);
						}
						else
						{
							lifttalon->Set(0);
							currarmpos = Boxwide;
						}
		break;
	case BOXSHORT:
		if(ConvertToInches(armwidth->GetVoltage())>boxsmallm)
								{
									clamper->Set(-0.50);
								}
								else if(ConvertToInches(armwidth->GetVoltage())<boxsmallm)
								{
									lifttalon->Set(0.50);
								}
								else
								{
									lifttalon->Set(0);
									currarmpos = Boxshort;
								}
		break;
	case GARBAGECAN:
		if(ConvertToInches(armwidth->GetVoltage())>gcanm)
								{
									clamper->Set(-0.50);
								}
								else if(ConvertToInches(armwidth->GetVoltage())<gcanm)
								{
									lifttalon->Set(0.50);
								}
								else
								{
									lifttalon->Set(0);
									currarmpos = Garbage;
								}
		break;
	}

}

float Lifter::ConvertToInches(float v){
	return (85.2459*v-23.90984);
}


