#include "Lifter.h"

Lifter::Lifter()
{
	lifthelper = new CANTalon(5);
	heightpot = new AnalogPotentiometer(3, 1.0, 0.0);
	topLimit = new DigitalInput(0);
	//botLimit = new DigitalInput(1);
	currarmpos = Open;
	lifttalon = new CANTalon(6);
	sDLift->init();
	currlevel = 0;

	lStick = new Joystick(0);

}

Lifter::~Lifter()
{
	delete lifthelper;
	delete heightpot;
	delete topLimit;
	//delete botLimit;
	delete lifttalon;

	delete lStick;

}

float Lifter::talSpeedLift(){

	return 0.25;

}

int Lifter::GetLevel()
{
	return currlevel;
}

void Lifter::SetLevel(level l)
{
	sDLift->PutNumber("poRead", ConvertToInches(heightpot->Get()));
	switch (l)
	{
	//SetArmpos(Lifter::armpos::OPEN);
	case GROUND:
		if(ConvertToInches(heightpot->Get())>groundinches && botLimit->Get())
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<=groundinches || !botLimit->Get()){
			lifttalon->Set(0);
			currlevel = Ground;
		}
		break;
	case UNDERBOXONE:
		if(ConvertToInches(heightpot->Get())>uboxoneinches)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<uboxoneinches)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Underboxone;
		}
		break;
	case INBETWEEN:
		if(ConvertToInches(heightpot->Get())>inbetweeninches)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<inbetweeninches)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Inbetween;
		}
		break;
	case OVERBOXTWO:
		if(ConvertToInches(heightpot->Get())>overbtwoinches)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<overbtwoinches)
		{
		lifttalon->Set(-talSpeedLift());
		lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Overboxtwo;
		}
		break;
	case GETGARBAGECAN:
		if(ConvertToInches(heightpot->Get())>getgarbageinches)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<getgarbageinches)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Getgarbage;
		}
		break;
	case PLACEGARBAGECAN:
		if(ConvertToInches(heightpot->Get())>placegarbageinches)
		{
			lifttalon->Set(talSpeedLift());
			lifthelper->Set(talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())<placegarbageinches)
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = PlaceGarbage;
		}
		break;

	case TOP:

		if(ConvertToInches(heightpot->Get())<topinches && topLimit->Get())
		{
			lifttalon->Set(-talSpeedLift());
			lifthelper->Set(-talSpeedLift());
		}
		else if(ConvertToInches(heightpot->Get())>=topinches || !(topLimit->Get()))
		{
			lifttalon->Set(0);
			lifthelper->Set(0);
			currlevel = Top;
		}
		break;

	};

}

float Lifter::ConvertToInches(float v){
	return abs(-85.2459*v+23.90984);
}


